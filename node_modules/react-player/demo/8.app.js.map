{"version":3,"sources":["webpack:///./src/players/Twitch.js"],"names":["Twitch","callPlayer","props","config","playerId","randomString","this","onMount","url","isReady","playsinline","onError","controls","isChannel","MATCH_URL_TWITCH_CHANNEL","test","id","match","MATCH_URL_TWITCH_VIDEO","player","setChannel","setVideo","getSDK","then","Player","playerID","video","channel","height","width","autoplay","playing","muted","options","READY","PLAYING","PAUSE","ENDED","ONLINE","OFFLINE","addEventListener","onReady","onPlay","onPause","onEnded","onLoaded","seconds","fraction","style","Component","canPlay","twitch"],"mappings":"0yDAKA,IAIqBA,E,uaAINC,K,kBACF,EAAKC,MAAMC,OAAOC,UAAlB,UAPY,kBAOZ,OAAoDC,gB,eA+DxD,WACL,EAAKJ,WAAW,YAAY,M,iBAGrB,WACP,EAAKA,WAAW,YAAY,M,2DAjE5BK,KAAKJ,MAAMK,SAAWD,KAAKJ,MAAMK,QAAQD,Q,2BAGrCE,EAAKC,GAAS,aACiCH,KAAKJ,MAAhDQ,EADU,EACVA,YAAaC,EADH,EACGA,QAASR,EADZ,EACYA,OAAQS,EADpB,EACoBA,SAChCC,EAAYC,IAAyBC,KAAKP,GAC1CQ,EAAKH,EAAYL,EAAIS,MAAMH,KAA0B,GAAKN,EAAIS,MAAMC,KAAwB,GAC9FT,EACEI,EACFP,KAAKa,OAAOC,WAAWJ,GAEvBV,KAAKa,OAAOE,SAAS,IAAML,GAI/BM,YA3BY,0CACG,UA0BaC,MAAK,SAAAvB,GAC/B,EAAKmB,OAAS,IAAInB,EAAOwB,OAAO,EAAKC,S,+VAAvB,EACZC,MAAOb,EAAY,GAAKG,EACxBW,QAASd,EAAYG,EAAK,GAC1BY,OAAQ,OACRC,MAAO,OACPnB,YAAaA,EACboB,SAAU,EAAK5B,MAAM6B,QACrBC,MAAO,EAAK9B,MAAM8B,MAElBpB,WAAUC,GAAmBD,GAC1BT,EAAO8B,UAX6B,MAaiBjC,EAAOwB,OAAzDU,EAbiC,EAajCA,MAAOC,EAb0B,EAa1BA,QAASC,EAbiB,EAajBA,MAAOC,EAbU,EAaVA,MAAOC,EAbG,EAaHA,OAAQC,EAbL,EAaKA,QAC9C,EAAKpB,OAAOqB,iBAAiBN,EAAO,EAAKhC,MAAMuC,SAC/C,EAAKtB,OAAOqB,iBAAiBL,EAAS,EAAKjC,MAAMwC,QACjD,EAAKvB,OAAOqB,iBAAiBJ,EAAO,EAAKlC,MAAMyC,SAC/C,EAAKxB,OAAOqB,iBAAiBH,EAAO,EAAKnC,MAAM0C,SAG/C,EAAKzB,OAAOqB,iBAAiBF,EAAQ,EAAKpC,MAAM2C,UAChD,EAAK1B,OAAOqB,iBAAiBD,EAAS,EAAKrC,MAAM2C,YAChDlC,K,6BAIHL,KAAKL,WAAW,U,8BAIhBK,KAAKL,WAAW,W,6BAIhBK,KAAKL,WAAW,W,6BAGV6C,GACNxC,KAAKL,WAAW,OAAQ6C,K,gCAGfC,GACTzC,KAAKL,WAAW,YAAa8C,K,oCAY7B,OAAOzC,KAAKL,WAAW,iB,uCAIvB,OAAOK,KAAKL,WAAW,oB,yCAIvB,OAAO,O,+BAQP,OACE,yBAAK+C,MALO,CACZnB,MAAO,OACPD,OAAQ,QAGWZ,GAAIV,KAAKmB,gB,8BA9FEwB,a,EAAfjD,E,cACE,U,EADFA,E,UAEFkD,IAAQC,Q,EAFNnD,E,eAGE","file":"8.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, randomString } from '../utils'\nimport { canPlay, MATCH_URL_TWITCH_CHANNEL, MATCH_URL_TWITCH_VIDEO } from '../patterns'\n\nconst SDK_URL = 'https://player.twitch.tv/js/embed/v1.js'\nconst SDK_GLOBAL = 'Twitch'\nconst PLAYER_ID_PREFIX = 'twitch-player-'\n\nexport default class Twitch extends Component {\n  static displayName = 'Twitch'\n  static canPlay = canPlay.twitch\n  static loopOnEnded = true\n  callPlayer = callPlayer\n  playerID = this.props.config.playerId || `${PLAYER_ID_PREFIX}${randomString()}`\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  load (url, isReady) {\n    const { playsinline, onError, config, controls } = this.props\n    const isChannel = MATCH_URL_TWITCH_CHANNEL.test(url)\n    const id = isChannel ? url.match(MATCH_URL_TWITCH_CHANNEL)[1] : url.match(MATCH_URL_TWITCH_VIDEO)[1]\n    if (isReady) {\n      if (isChannel) {\n        this.player.setChannel(id)\n      } else {\n        this.player.setVideo('v' + id)\n      }\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL).then(Twitch => {\n      this.player = new Twitch.Player(this.playerID, {\n        video: isChannel ? '' : id,\n        channel: isChannel ? id : '',\n        height: '100%',\n        width: '100%',\n        playsinline: playsinline,\n        autoplay: this.props.playing,\n        muted: this.props.muted,\n        // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n        controls: isChannel ? true : controls,\n        ...config.options\n      })\n      const { READY, PLAYING, PAUSE, ENDED, ONLINE, OFFLINE } = Twitch.Player\n      this.player.addEventListener(READY, this.props.onReady)\n      this.player.addEventListener(PLAYING, this.props.onPlay)\n      this.player.addEventListener(PAUSE, this.props.onPause)\n      this.player.addEventListener(ENDED, this.props.onEnded)\n\n      // Prevent weird isLoading behaviour when streams are offline\n      this.player.addEventListener(ONLINE, this.props.onLoaded)\n      this.player.addEventListener(OFFLINE, this.props.onLoaded)\n    }, onError)\n  }\n\n  play () {\n    this.callPlayer('play')\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    this.callPlayer('pause')\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('seek', seconds)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n\n  mute = () => {\n    this.callPlayer('setMuted', true)\n  }\n\n  unmute = () => {\n    this.callPlayer('setMuted', false)\n  }\n\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n\n  getSecondsLoaded () {\n    return null\n  }\n\n  render () {\n    const style = {\n      width: '100%',\n      height: '100%'\n    }\n    return (\n      <div style={style} id={this.playerID} />\n    )\n  }\n}\n"],"sourceRoot":""}