{"version":3,"sources":["webpack:///./src/players/Vimeo.js"],"names":["Vimeo","callPlayer","setVolume","props","volume","container","this","onMount","url","duration","getSDK","then","player","Player","autoplay","playing","muted","loop","playsinline","controls","config","playerOptions","ready","iframe","querySelector","style","width","height","onError","on","onReady","refreshDuration","onPlay","onPause","e","onSeek","seconds","onEnded","currentTime","secondsLoaded","onBuffer","onBufferEnd","getDuration","promise","fraction","rate","overflow","display","key","ref","Component","canPlay","vimeo"],"mappings":"2yDAKA,IAGqBA,E,uaAINC,K,kBACF,M,qBACG,M,uBACE,M,eAoFT,WACL,EAAKC,UAAU,M,iBAGR,WACmB,OAAtB,EAAKC,MAAMC,QACb,EAAKF,UAAU,EAAKC,MAAMC,W,cAgBxB,SAAAC,GACJ,EAAKA,UAAYA,K,2DAxGjBC,KAAKH,MAAMI,SAAWD,KAAKH,MAAMI,QAAQD,Q,2BAGrCE,GAAK,WACTF,KAAKG,SAAW,KAChBC,YAlBY,yCACG,SAiBaC,MAAK,SAAAX,GAC1B,EAAKK,YACV,EAAKO,OAAS,IAAIZ,EAAMa,OAAO,EAAKR,U,+VAAtB,EACZG,MACAM,SAAU,EAAKX,MAAMY,QACrBC,MAAO,EAAKb,MAAMa,MAClBC,KAAM,EAAKd,MAAMc,KACjBC,YAAa,EAAKf,MAAMe,YACxBC,SAAU,EAAKhB,MAAMgB,UAClB,EAAKhB,MAAMiB,OAAOC,gBAEvB,EAAKT,OAAOU,QAAQX,MAAK,WACvB,IAAMY,EAAS,EAAKlB,UAAUmB,cAAc,UAC5CD,EAAOE,MAAMC,MAAQ,OACrBH,EAAOE,MAAME,OAAS,UAHxB,MAIS,EAAKxB,MAAMyB,SACpB,EAAKhB,OAAOiB,GAAG,UAAU,WACvB,EAAK1B,MAAM2B,UACX,EAAKC,qBAEP,EAAKnB,OAAOiB,GAAG,QAAQ,WACrB,EAAK1B,MAAM6B,SACX,EAAKD,qBAEP,EAAKnB,OAAOiB,GAAG,QAAS,EAAK1B,MAAM8B,SACnC,EAAKrB,OAAOiB,GAAG,UAAU,SAAAK,GAAC,OAAI,EAAK/B,MAAMgC,OAAOD,EAAEE,YAClD,EAAKxB,OAAOiB,GAAG,QAAS,EAAK1B,MAAMkC,SACnC,EAAKzB,OAAOiB,GAAG,QAAS,EAAK1B,MAAMyB,SACnC,EAAKhB,OAAOiB,GAAG,cAAc,YAAiB,IAAdO,EAAc,EAAdA,QAC9B,EAAKE,YAAcF,KAErB,EAAKxB,OAAOiB,GAAG,YAAY,YAAiB,IAAdO,EAAc,EAAdA,QAC5B,EAAKG,cAAgBH,KAEvB,EAAKxB,OAAOiB,GAAG,cAAe,EAAK1B,MAAMqC,UACzC,EAAK5B,OAAOiB,GAAG,YAAa,EAAK1B,MAAMsC,gBACtCnC,KAAKH,MAAMyB,W,wCAGG,WACjBtB,KAAKM,OAAO8B,cAAc/B,MAAK,SAAAF,GAC7B,EAAKA,SAAWA,O,6BAKlB,IAAMkC,EAAUrC,KAAKL,WAAW,QAC5B0C,GACFA,EAAO,MAAOrC,KAAKH,MAAMyB,W,8BAK3BtB,KAAKL,WAAW,W,6BAIhBK,KAAKL,WAAW,Y,6BAGVmC,GACN9B,KAAKL,WAAW,iBAAkBmC,K,gCAGzBQ,GACTtC,KAAKL,WAAW,YAAa2C,K,8BAGtB3B,GACPX,KAAKL,WAAW,UAAWgB,K,sCAGZ4B,GACfvC,KAAKL,WAAW,kBAAmB4C,K,oCAcnC,OAAOvC,KAAKG,W,uCAIZ,OAAOH,KAAKgC,c,yCAIZ,OAAOhC,KAAKiC,gB,+BAOJ,IAEFd,EAAQ,CACZC,MAAO,OACPC,OAAQ,OACRmB,SAAU,SACVC,QALkBzC,KAAKH,MAAjB4C,SAOR,OACE,yBACEC,IAAK1C,KAAKH,MAAMK,IAChByC,IAAK3C,KAAK2C,IACVxB,MAAOA,S,8BAjIoByB,a,EAAdlD,E,cACE,S,EADFA,E,UAEFmD,IAAQC,O,EAFNpD,E,aAGA","file":"10.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK } from '../utils'\nimport { canPlay } from '../patterns'\n\nconst SDK_URL = 'https://player.vimeo.com/api/player.js'\nconst SDK_GLOBAL = 'Vimeo'\n\nexport default class Vimeo extends Component {\n  static displayName = 'Vimeo'\n  static canPlay = canPlay.vimeo\n  static forceLoad = true // Prevent checking isLoading when URL changes\n  callPlayer = callPlayer\n  duration = null\n  currentTime = null\n  secondsLoaded = null\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  load (url) {\n    this.duration = null\n    getSDK(SDK_URL, SDK_GLOBAL).then(Vimeo => {\n      if (!this.container) return\n      this.player = new Vimeo.Player(this.container, {\n        url,\n        autoplay: this.props.playing,\n        muted: this.props.muted,\n        loop: this.props.loop,\n        playsinline: this.props.playsinline,\n        controls: this.props.controls,\n        ...this.props.config.playerOptions\n      })\n      this.player.ready().then(() => {\n        const iframe = this.container.querySelector('iframe')\n        iframe.style.width = '100%'\n        iframe.style.height = '100%'\n      }).catch(this.props.onError)\n      this.player.on('loaded', () => {\n        this.props.onReady()\n        this.refreshDuration()\n      })\n      this.player.on('play', () => {\n        this.props.onPlay()\n        this.refreshDuration()\n      })\n      this.player.on('pause', this.props.onPause)\n      this.player.on('seeked', e => this.props.onSeek(e.seconds))\n      this.player.on('ended', this.props.onEnded)\n      this.player.on('error', this.props.onError)\n      this.player.on('timeupdate', ({ seconds }) => {\n        this.currentTime = seconds\n      })\n      this.player.on('progress', ({ seconds }) => {\n        this.secondsLoaded = seconds\n      })\n      this.player.on('bufferstart', this.props.onBuffer)\n      this.player.on('bufferend', this.props.onBufferEnd)\n    }, this.props.onError)\n  }\n\n  refreshDuration () {\n    this.player.getDuration().then(duration => {\n      this.duration = duration\n    })\n  }\n\n  play () {\n    const promise = this.callPlayer('play')\n    if (promise) {\n      promise.catch(this.props.onError)\n    }\n  }\n\n  pause () {\n    this.callPlayer('pause')\n  }\n\n  stop () {\n    this.callPlayer('unload')\n  }\n\n  seekTo (seconds) {\n    this.callPlayer('setCurrentTime', seconds)\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction)\n  }\n\n  setLoop (loop) {\n    this.callPlayer('setLoop', loop)\n  }\n\n  setPlaybackRate (rate) {\n    this.callPlayer('setPlaybackRate', rate)\n  }\n\n  mute = () => {\n    this.setVolume(0)\n  }\n\n  unmute = () => {\n    if (this.props.volume !== null) {\n      this.setVolume(this.props.volume)\n    }\n  }\n\n  getDuration () {\n    return this.duration\n  }\n\n  getCurrentTime () {\n    return this.currentTime\n  }\n\n  getSecondsLoaded () {\n    return this.secondsLoaded\n  }\n\n  ref = container => {\n    this.container = container\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      overflow: 'hidden',\n      display\n    }\n    return (\n      <div\n        key={this.props.url}\n        ref={this.ref}\n        style={style}\n      />\n    )\n  }\n}\n"],"sourceRoot":""}