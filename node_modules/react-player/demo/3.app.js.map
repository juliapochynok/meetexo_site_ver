{"version":3,"sources":["webpack:///./src/players/FilePlayer.js"],"names":["IOS","navigator","test","userAgent","window","MSStream","MATCH_DROPBOX_URL","MATCH_CLOUDFLARE_STREAM","FilePlayer","props","onReady","onPlay","onBuffer","onBufferEnd","onPause","onEnded","onError","onEnablePIP","e","onDisablePIP","playing","play","player","supportsWebKitPresentationMode","webkitPresentationMode","onSeek","target","currentTime","muted","source","index","key","src","track","prevPlayer","this","onMount","addListeners","load","prevProps","shouldUseAudio","removeListeners","hls","destroy","playsinline","addEventListener","onPresentationModeChange","setAttribute","removeEventListener","config","forceVideo","attributes","poster","AUDIO_EXTENSIONS","url","forceAudio","forceHLS","HLS_EXTENSIONS","DASH_EXTENSIONS","forceDASH","FLV_EXTENSIONS","forceFLV","hlsVersion","hlsOptions","dashVersion","flvVersion","dash","reset","shouldUseHLS","getSDK","replace","then","Hls","on","Events","ERROR","data","id","match","loadSource","attachMedia","onLoaded","shouldUseDASH","dashjs","MediaPlayer","create","initialize","parseInt","getDebug","setLogToBrowserConsole","updateSettings","debug","logLevel","Debug","LOG_LEVEL_NONE","shouldUseFLV","flvjs","flv","createPlayer","type","attachMediaElement","Array","isMediaStream","srcObject","URL","createObjectURL","promise","pause","removeAttribute","seconds","fraction","volume","requestPictureInPicture","document","pictureInPictureElement","webkitSetPresentationMode","exitPictureInPicture","rate","playbackRate","duration","seekable","Infinity","length","end","buffered","getDuration","useHLS","useDASH","useFLV","loop","controls","width","height","Element","style","ref","getSource","preload","autoPlay","undefined","map","renderSourceElement","tracks","renderTrack","Component","canPlay","file"],"mappings":"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","file":"3.app.js","sourcesContent":["import React, { Component } from 'react'\n\nimport { getSDK, isMediaStream, supportsWebKitPresentationMode } from '../utils'\nimport { canPlay, AUDIO_EXTENSIONS, HLS_EXTENSIONS, DASH_EXTENSIONS, FLV_EXTENSIONS } from '../patterns'\n\nconst IOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream\nconst HLS_SDK_URL = 'https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js'\nconst HLS_GLOBAL = 'Hls'\nconst DASH_SDK_URL = 'https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js'\nconst DASH_GLOBAL = 'dashjs'\nconst FLV_SDK_URL = 'https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js'\nconst FLV_GLOBAL = 'flvjs'\nconst MATCH_DROPBOX_URL = /www\\.dropbox\\.com\\/.+/\nconst MATCH_CLOUDFLARE_STREAM = /https:\\/\\/watch\\.cloudflarestream\\.com\\/([a-z0-9]+)/\nconst REPLACE_CLOUDFLARE_STREAM = 'https://videodelivery.net/{id}/manifest/video.m3u8'\n\nexport default class FilePlayer extends Component {\n  static displayName = 'FilePlayer'\n  static canPlay = canPlay.file\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n    this.addListeners(this.player)\n    if (IOS) {\n      this.player.load()\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {\n      this.removeListeners(this.prevPlayer)\n      this.addListeners(this.player)\n    }\n  }\n\n  componentWillUnmount () {\n    this.removeListeners(this.player)\n    if (this.hls) {\n      this.hls.destroy()\n    }\n  }\n\n  addListeners (player) {\n    const { playsinline } = this.props\n    player.addEventListener('canplay', this.onReady)\n    player.addEventListener('play', this.onPlay)\n    player.addEventListener('waiting', this.onBuffer)\n    player.addEventListener('playing', this.onBufferEnd)\n    player.addEventListener('pause', this.onPause)\n    player.addEventListener('seeked', this.onSeek)\n    player.addEventListener('ended', this.onEnded)\n    player.addEventListener('error', this.onError)\n    player.addEventListener('enterpictureinpicture', this.onEnablePIP)\n    player.addEventListener('leavepictureinpicture', this.onDisablePIP)\n    player.addEventListener('webkitpresentationmodechanged', this.onPresentationModeChange)\n    if (playsinline) {\n      player.setAttribute('playsinline', '')\n      player.setAttribute('webkit-playsinline', '')\n      player.setAttribute('x5-playsinline', '')\n    }\n  }\n\n  removeListeners (player) {\n    player.removeEventListener('canplay', this.onReady)\n    player.removeEventListener('play', this.onPlay)\n    player.removeEventListener('waiting', this.onBuffer)\n    player.removeEventListener('playing', this.onBufferEnd)\n    player.removeEventListener('pause', this.onPause)\n    player.removeEventListener('seeked', this.onSeek)\n    player.removeEventListener('ended', this.onEnded)\n    player.removeEventListener('error', this.onError)\n    player.removeEventListener('enterpictureinpicture', this.onEnablePIP)\n    player.removeEventListener('leavepictureinpicture', this.onDisablePIP)\n    player.removeEventListener('webkitpresentationmodechanged', this.onPresentationModeChange)\n  }\n\n  // Proxy methods to prevent listener leaks\n  onReady = (...args) => this.props.onReady(...args)\n  onPlay = (...args) => this.props.onPlay(...args)\n  onBuffer = (...args) => this.props.onBuffer(...args)\n  onBufferEnd = (...args) => this.props.onBufferEnd(...args)\n  onPause = (...args) => this.props.onPause(...args)\n  onEnded = (...args) => this.props.onEnded(...args)\n  onError = (...args) => this.props.onError(...args)\n  onEnablePIP = (...args) => this.props.onEnablePIP(...args)\n\n  onDisablePIP = e => {\n    const { onDisablePIP, playing } = this.props\n    onDisablePIP(e)\n    if (playing) {\n      this.play()\n    }\n  }\n\n  onPresentationModeChange = e => {\n    if (this.player && supportsWebKitPresentationMode(this.player)) {\n      const { webkitPresentationMode } = this.player\n      if (webkitPresentationMode === 'picture-in-picture') {\n        this.onEnablePIP(e)\n      } else if (webkitPresentationMode === 'inline') {\n        this.onDisablePIP(e)\n      }\n    }\n  }\n\n  onSeek = e => {\n    this.props.onSeek(e.target.currentTime)\n  }\n\n  shouldUseAudio (props) {\n    if (props.config.forceVideo) {\n      return false\n    }\n    if (props.config.attributes.poster) {\n      return false // Use <video> so that poster is shown\n    }\n    return AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio\n  }\n\n  shouldUseHLS (url) {\n    if (this.props.config.forceHLS) {\n      return true\n    }\n    if (IOS) {\n      return false\n    }\n    return HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url)\n  }\n\n  shouldUseDASH (url) {\n    return DASH_EXTENSIONS.test(url) || this.props.config.forceDASH\n  }\n\n  shouldUseFLV (url) {\n    return FLV_EXTENSIONS.test(url) || this.props.config.forceFLV\n  }\n\n  load (url) {\n    const { hlsVersion, hlsOptions, dashVersion, flvVersion } = this.props.config\n    if (this.hls) {\n      this.hls.destroy()\n    }\n    if (this.dash) {\n      this.dash.reset()\n    }\n    if (this.shouldUseHLS(url)) {\n      getSDK(HLS_SDK_URL.replace('VERSION', hlsVersion), HLS_GLOBAL).then(Hls => {\n        this.hls = new Hls(hlsOptions)\n        this.hls.on(Hls.Events.ERROR, (e, data) => {\n          this.props.onError(e, data, this.hls, Hls)\n        })\n        if (MATCH_CLOUDFLARE_STREAM.test(url)) {\n          const id = url.match(MATCH_CLOUDFLARE_STREAM)[1]\n          this.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace('{id}', id))\n        } else {\n          this.hls.loadSource(url)\n        }\n        this.hls.attachMedia(this.player)\n        this.props.onLoaded()\n      })\n    }\n    if (this.shouldUseDASH(url)) {\n      getSDK(DASH_SDK_URL.replace('VERSION', dashVersion), DASH_GLOBAL).then(dashjs => {\n        this.dash = dashjs.MediaPlayer().create()\n        this.dash.initialize(this.player, url, this.props.playing)\n        this.dash.on('error', this.props.onError)\n        if (parseInt(dashVersion) < 3) {\n          this.dash.getDebug().setLogToBrowserConsole(false)\n        } else {\n          this.dash.updateSettings({ debug: { logLevel: dashjs.Debug.LOG_LEVEL_NONE } })\n        }\n        this.props.onLoaded()\n      })\n    }\n    if (this.shouldUseFLV(url)) {\n      getSDK(FLV_SDK_URL.replace('VERSION', flvVersion), FLV_GLOBAL).then(flvjs => {\n        this.flv = flvjs.createPlayer({ type: 'flv', url })\n        this.flv.attachMediaElement(this.player)\n        this.flv.load()\n        this.props.onLoaded()\n      })\n    }\n\n    if (url instanceof Array) {\n      // When setting new urls (<source>) on an already loaded video,\n      // HTMLMediaElement.load() is needed to reset the media element\n      // and restart the media resource. Just replacing children source\n      // dom nodes is not enough\n      this.player.load()\n    } else if (isMediaStream(url)) {\n      try {\n        this.player.srcObject = url\n      } catch (e) {\n        this.player.src = window.URL.createObjectURL(url)\n      }\n    }\n  }\n\n  play () {\n    const promise = this.player.play()\n    if (promise) {\n      promise.catch(this.props.onError)\n    }\n  }\n\n  pause () {\n    this.player.pause()\n  }\n\n  stop () {\n    this.player.removeAttribute('src')\n    if (this.dash) {\n      this.dash.reset()\n    }\n  }\n\n  seekTo (seconds) {\n    this.player.currentTime = seconds\n  }\n\n  setVolume (fraction) {\n    this.player.volume = fraction\n  }\n\n  mute = () => {\n    this.player.muted = true\n  }\n\n  unmute = () => {\n    this.player.muted = false\n  }\n\n  enablePIP () {\n    if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n      this.player.requestPictureInPicture()\n    } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== 'picture-in-picture') {\n      this.player.webkitSetPresentationMode('picture-in-picture')\n    }\n  }\n\n  disablePIP () {\n    if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n      document.exitPictureInPicture()\n    } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== 'inline') {\n      this.player.webkitSetPresentationMode('inline')\n    }\n  }\n\n  setPlaybackRate (rate) {\n    this.player.playbackRate = rate\n  }\n\n  getDuration () {\n    if (!this.player) return null\n    const { duration, seekable } = this.player\n    // on iOS, live streams return Infinity for the duration\n    // so instead we use the end of the seekable timerange\n    if (duration === Infinity && seekable.length > 0) {\n      return seekable.end(seekable.length - 1)\n    }\n    return duration\n  }\n\n  getCurrentTime () {\n    if (!this.player) return null\n    return this.player.currentTime\n  }\n\n  getSecondsLoaded () {\n    if (!this.player) return null\n    const { buffered } = this.player\n    if (buffered.length === 0) {\n      return 0\n    }\n    const end = buffered.end(buffered.length - 1)\n    const duration = this.getDuration()\n    if (end > duration) {\n      return duration\n    }\n    return end\n  }\n\n  getSource (url) {\n    const useHLS = this.shouldUseHLS(url)\n    const useDASH = this.shouldUseDASH(url)\n    const useFLV = this.shouldUseFLV(url)\n    if (url instanceof Array || isMediaStream(url) || useHLS || useDASH || useFLV) {\n      return undefined\n    }\n    if (MATCH_DROPBOX_URL.test(url)) {\n      return url.replace('www.dropbox.com', 'dl.dropboxusercontent.com')\n    }\n    return url\n  }\n\n  renderSourceElement = (source, index) => {\n    if (typeof source === 'string') {\n      return <source key={index} src={source} />\n    }\n    return <source key={index} {...source} />\n  }\n\n  renderTrack = (track, index) => {\n    return <track key={index} {...track} />\n  }\n\n  ref = player => {\n    if (this.player) {\n      // Store previous player to be used by removeListeners()\n      this.prevPlayer = this.player\n    }\n    this.player = player\n  }\n\n  render () {\n    const { url, playing, loop, controls, muted, config, width, height } = this.props\n    const useAudio = this.shouldUseAudio(this.props)\n    const Element = useAudio ? 'audio' : 'video'\n    const style = {\n      width: width === 'auto' ? width : '100%',\n      height: height === 'auto' ? height : '100%'\n    }\n    return (\n      <Element\n        ref={this.ref}\n        src={this.getSource(url)}\n        style={style}\n        preload='auto'\n        autoPlay={playing || undefined}\n        controls={controls}\n        muted={muted}\n        loop={loop}\n        {...config.attributes}\n      >\n        {url instanceof Array &&\n          url.map(this.renderSourceElement)}\n        {config.tracks.map(this.renderTrack)}\n      </Element>\n    )\n  }\n}\n"],"sourceRoot":""}