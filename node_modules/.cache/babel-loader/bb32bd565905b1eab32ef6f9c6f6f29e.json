{"ast":null,"code":"var _jsxFileName = \"/home/user/ucu/WEB/meet_exo_app1/meet_exo_app_DRAFT/src/App.js\";\nimport React, { Component } from 'react';\nimport update from 'react-addons-update';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport got from './images/got.jpg';\nimport logo from \"./svg/logo.svg\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        Stark: 0,\n        Lannister: 0,\n        Targaryen: 0\n      },\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentWillMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    const updatedAnswersCount = update(this.state.answersCount, {\n      [answer]: {\n        $apply: currentValue => currentValue + 1\n      }\n    });\n    this.setState({\n      answersCount: updatedAnswersCount,\n      answer: answer\n    });\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n  }\n\n  renderQuiz() {\n    return /*#__PURE__*/React.createElement(Quiz, {\n      answer: this.state.answer,\n      answerOptions: this.state.answerOptions,\n      questionId: this.state.questionId,\n      question: this.state.question,\n      questionTotal: quizQuestions.length,\n      onAnswerSelected: this.handleAnswerSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    });\n  }\n\n  renderResult() {\n    return /*#__PURE__*/React.createElement(Result, {\n      quizResult: this.state.result,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      src: got,\n      className: \"App-img\",\n      alt: \"img\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    })), this.state.result ? this.renderResult() : this.renderQuiz());\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/user/ucu/WEB/meet_exo_app1/meet_exo_app_DRAFT/src/App.js"],"names":["React","Component","update","quizQuestions","Quiz","Result","got","App","constructor","props","state","counter","questionId","question","answerOptions","answer","answersCount","Stark","Lannister","Targaryen","result","handleAnswerSelected","bind","componentWillMount","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","setResults","getResults","updatedAnswersCount","$apply","currentValue","answersCountKeys","Object","keys","answersCountValues","key","maxAnswerCount","max","apply","filter","renderQuiz","renderResult","render","logo"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react';\nimport update from 'react-addons-update';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport got from './images/got.jpg';\nimport logo from './svg/logo.svg';\nimport './App.css';\n \nclass App extends Component {\n \n \n \n \n  constructor(props) {\n    super(props);\n \n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        Stark: 0,\n        Lannister: 0,\n        Targaryen: 0\n      },\n      result: ''\n    };\n \n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n \n  componentWillMount() {\n    const shuffledAnswerOptions = quizQuestions.map((question) => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n \n  shuffleArray(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n \n    return array;\n  };\n \n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n \n    if (this.state.questionId < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n        setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n \n  setUserAnswer(answer) {\n    const updatedAnswersCount = update(this.state.answersCount, {\n      [answer]: {$apply: (currentValue) => currentValue + 1}\n    });\n \n    this.setState({\n        answersCount: updatedAnswersCount,\n        answer: answer\n    });\n  }\n \n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n \n    this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n    });\n  }\n \n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n \n    return answersCountKeys.filter((key) => answersCount[key] === maxAnswerCount);\n  }\n \n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n \n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n \n  renderResult() {\n    return (\n      <Result quizResult={this.state.result} />\n    );\n  }\n \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" /> \n          <img src={got} className=\"App-img\" alt=\"img\" />\n          \n        </div>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n \n \n \n \n  }\n \n}\n \nexport default App;"]},"metadata":{},"sourceType":"module"}